swagger: "2.0"

# TODOs:
#   - Add authentication and authorization
#   - Add meta: ToS, License, Contact info, ...



info:
  version: '0.0.1'
  title: 'Rollup Proof Generator'
  description: 'API specification for the proof generation service of the rollup.'
host: localhost:8080

paths:
  /input:
    post:
      operationId: postInput
      tags:
      - Proof Generator
      summary: Send inputs to generate a proof
      description: Send a petition of proo generation based on inputs. Note that this endpoint will just schedule the proof generation, not return it.
      parameters:
      - in: body
        required: true
        name: Input
        description: Input for the proof generation circuit.
        schema:
          $ref: '#/definitions/input'
      produces:
      - application/json
      responses:
        200:
          description: successful operation
        401:
          description: Input validation error
          schema:
            $ref: '#/definitions/Unauthorized'
        500:
          description: Internal server
          schema:
            $ref: '#/definitions/Error'
        501:
          description: Not implemented
          schema:
            $ref: '#/definitions/NotImplemented'
  /status:
    get:
      operationId: getStatus
      tags:
      - Proof Generator
      summary: Get the status of the proof generator.
      description: Returns the status of the proof generator.
      produces:
      - application/json
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/status'
        401:
          description: Input validation error
          schema:
            $ref: '#/definitions/Unauthorized'
        500:
          description: Internal server
          schema:
            $ref: '#/definitions/Error'
        501:
          description: Not implemented
          schema:
            $ref: '#/definitions/NotImplemented'
  /cancel:
    post:
      operationId: postCancel
      tags:
      - Proof Generator
      summary: Abort the proof that is currentl being generated
      description: Send a petition to abort the creation process of a proof
      responses:
        200:
          description: successful operation
        401:
          description: Input validation error
          schema:
            $ref: '#/definitions/Unauthorized'
        500:
          description: Internal server
          schema:
            $ref: '#/definitions/Error'
        501:
          description: Not implemented
          schema:
            $ref: '#/definitions/NotImplemented'

definitions:
  input:
    type: object
    description: Set of input signals required to generate a proof
    maxProperties: 30
    properties:
      oldStRoot:
        type: string
        description: Root of the old state tree hashed, encoded as a string representing a 256 bits unsigned integer
        pattern: ^\d{1,78}$
        example: "12345678123456781234567812345678"
      feePlanCoins:
        # TODO: check type validation and description
        type: integer
        description: ??????, encoded as a string representing a 256 bits unsigned integer
        example: 0
        minimum: 0
      feePlanFees:
        # TODO: check type validation and description
        type: integer
        description: ???????, encoded as a string representing a 256 bits unsigned integer
        minimum: 0
        example: 0
      txData:
        # TODO: check description, fixed length???
        type: array
        description: ???????, encoded as a string representing a 256 bits unsigned integer
        minItems: 4
        maxItems: 4
        items: {}
        example:
        - "0"
        - "0"
        - "1294077440023230710144016724176942272334582932281947479092973291962369"
        - "431359146674410236714672241732596457699132774224023767129425975443457"
      rqTxData:
        # TODO: check description and validatioin, fixed length???
        type: array
        description: ???????
        minItems: 4
        maxItems: 4
        items:
          type: integer
          minimum: 0
        example:
        - 0
        - 0
        - 0
        - 0
      s:
        # TODO: check description and validatioin, fixed length???
        type: array
        description: ???????
        minItems: 4
        maxItems: 4
        items:
          type: integer
          minimum: 0
        example:
        - 0
        - 0
        - 0
        - 0
      r8x:
        # TODO: check description and validatioin, fixed length???
        type: array
        description: ???????
        minItems: 4
        maxItems: 4
        items:
          type: integer
          minimum: 0
        example:
        - 0
        - 0
        - 0
        - 0
      r8y:
        # TODO: check description and validatioin, fixed length???
        type: array
        description: ???????
        minItems: 4
        maxItems: 4
        items:
          type: integer
          minimum: 0
        example:
        - 0
        - 0
        - 0
        - 0
      loadAmount:
        # TODO: check description and validatioin, fixed length???
        type: array
        description: ???????
        minItems: 4
        maxItems: 4
        items:
          type: integer
          minimum: 0
        example:
        - 0
        - 0
        - 1000
        - 0
      ethAddr:
        # TODO: check description and validatioin, fixed length???
        type: array
        description: ???????, encoded as uint or bigInt
        minItems: 4
        maxItems: 4
        items: {}
        example:
        - 0
        - 0
        - "564285745605685379469803228198653436451829107432"
        - "564285745605685379469803228198653436451829107432"
      ax:
        # TODO: check description and validatioin, fixed length???
        type: array
        description: ???????
        minItems: 4
        maxItems: 4
        items: {}
        example:
        - 0
        - 0
        - "19978187010499430245869538435991859273974821401831892378333645864391780110865"
        - "19978187010499430245869538435991859273974821401831892378333645864391780110865"
      ay:
        # TODO: check description and validatioin, fixed length???
        type: array
        description: ???????
        minItems: 4
        maxItems: 4
        items: {}
        example:
        - 0
        - 0
        - "8221948295571505153368741349618427496143137236526643398342942827546824861670"
        - "8221948295571505153368741349618427496143137236526643398342942827546824861670"
      ax1:
        # TODO: check description and validatioin, fixed length???
        type: array
        description: ???????
        minItems: 4
        maxItems: 4
        items: {}
        example:
        - 0
        - 0
        - 4660
        - "19978187010499430245869538435991859273974821401831892378333645864391780110865"
      ay1:
        # TODO: check description and validatioin, fixed length???
        type: array
        description: ???????
        minItems: 4
        maxItems: 4
        items: {}
        example:
        - 0
        - 0
        - 4660
        - '8221948295571505153368741349618427496143137236526643398342942827546824861670'
      amount1:
        # TODO: check description and validatioin, fixed length???
        type: array
        description: ???????
        minItems: 4
        maxItems: 4
        items: {}
        example:
        - 0
        - 0
        - 4660
        - "1000"
      nonce1:
        # TODO: check description and validatioin, fixed length???
        type: array
        description: ???????
        minItems: 4
        maxItems: 4
        items: {}
        example:
        - 0
        - 0
        - 4660
        - 0
      ethAddr1:
        # TODO: check description and validatioin, fixed length???
        type: array
        description: ???????
        minItems: 4
        maxItems: 4
        items: {}
        example:
        - 0
        - 0
        - "564285745605685379469803228198653436451829107432"
        - "564285745605685379469803228198653436451829107432"
      siblings1:
        # TODO: check description and validatioin, fixed length???
        type: array
        description: ???????
        minItems: 4
        maxItems: 4
        items:
          type: array
          minItems: 8
          maxItems: 8
          items: {}
        example:
        - - 0
          - 0
          - 0
          - 0
          - 0
          - 0
          - 0
          - 0
        - - 0
          - 0
          - 0
          - 0
          - 0
          - 0
          - 0
          - 0
        - - 0
          - 0
          - 0
          - 0
          - 0
          - 0
          - 0
          - 0
        - - '0'
          - '0'
          - '0'
          - '0'
          - '0'
          - '0'
          - '0'
          - '0'
      isOld0_1:
        # TODO: IS THIS A BOOL!?!?!, fixed length???
        type: array
        description: ???????
        minItems: 4
        maxItems: 4
        items: {}
        example:
        - 0
        - 0
        - 1
        - 0
      oldKey1:
        # TODO: check description and validatioin, fixed length???
        type: array
        description: ???????
        minItems: 4
        maxItems: 4
        items: {}
        example:
        - 0
        - 0
        - 0
        - 4660
      oldValue1:
        # TODO: check description and validatioin, fixed length???
        type: array
        description: ???????
        minItems: 4
        maxItems: 4
        items: {}
        example:
        - 0
        - 0
        - 0
        - 4660
      ax2:
        # TODO: check description and validatioin, fixed length???
        type: array
        description: ???????
        minItems: 4
        maxItems: 4
        items: {}
        example:
        - 0
        - 0
        - 0
        - 4660
      ay2:
        # TODO: check description and validatioin, fixed length???
        type: array
        description: ???????
        minItems: 4
        maxItems: 4
        items: {}
        example:
        - 0
        - 0
        - 0
        - 4660
      amount2:
        # TODO: check description and validatioin, fixed length???
        type: array
        description: ???????
        minItems: 4
        maxItems: 4
        items: {}
        example:
        - 0
        - 0
        - 0
        - 4660
      nonce2:
        # TODO: check description and validatioin, fixed length???
        type: array
        description: ???????
        minItems: 4
        maxItems: 4
        items: {}
        example:
        - 0
        - 0
        - 0
        - 4660
      ethAddr2:
        # TODO: check description and validatioin, fixed length???
        type: array
        description: ???????
        minItems: 4
        maxItems: 4
        items: {}
        example:
        - 0
        - 0
        - 0
        - "564285745605685379469803228198653436451829107432"
      siblings2:
        # TODO: check description and validatioin, fixed length???
        type: array
        description: ???????
        minItems: 4
        maxItems: 4
        items:
          type: array
          minItems: 8
          maxItems: 8
          items: {}
        example:
        - - 0
          - 0
          - 0
          - 0
          - 0
          - 0
          - 0
          - 0
        - - 0
          - 0
          - 0
          - 0
          - 0
          - 0
          - 0
          - 0
        - - 0
          - 0
          - 0
          - 0
          - 0
          - 0
          - 0
          - 0
        - - '0'
          - '0'
          - '0'
          - '0'
          - '0'
          - '0'
          - '0'
          - '0'
      isOld0_2:
        # TODO: IS THIS A BOOL!?!?!, fixed length???
        type: array
        description: ???????
        minItems: 4
        maxItems: 4
        items:
          type: integer
          minimum: 0
          maximum: 1
        example:
        - 0
        - 0
        - 0
        - 1
      oldKey2:
        # TODO: check description and validatioin, fixed length???
        type: array
        description: ???????
        minItems: 4
        maxItems: 4
        items: {}
        example:
        - 0
        - 0
        - 0
        - 0
      oldValue2:
        # TODO: check description and validatioin, fixed length???
        type: array
        description: ???????
        minItems: 4
        maxItems: 4
        items: {}
        example:
        - 0
        - 0
        - 0
        - 0
    required:
    - oldStRoot
    - feePlanCoins
    - feePlanFees
    - txData
    - rqTxData
    - s
    - r8x
    - r8y
    - loadAmount
    - ethAddr
    - ax
    - ay
    - ax1
    - ay1
    - amount1
    - nonce1
    - ethAddr1
    - siblings1
    - isOld0_1
    - oldKey1
    - oldValue1
    - ax2
    - ay2
    - amount2
    - nonce2
    - ethAddr2
    - siblings2
    - isOld0_2
    - oldKey2
    - oldValue2

  # TODO: check proof format add regex validation and redo example according to it
  status:
    type: object
    properties:
      status:
        type: string
        enum:
        - Idle
        - Error
        - Pending
        - Finished
        description: >
          Possible states of the proof service:
           * `Idle` - waiting for input
           * `Error` - if witness is not correct
           * `Pending` - if proof is being generated
           * `Finished` - if proof has been generated, in that case proof will be returned
      proof:
        type: string
        description: successfully generated proof. When this field is included in the response the value of status will always be `Finished`
        # pattern: ^\d{1,78}$
        # example: ...
    example:
      status: Finished
      proof: add propper example here as well
    required:
    - status

  Error:
    description: Internal server error
    type: object
    properties:
      code:
        type: string
        example: UNKNOWN_ERROR
      message:
        type: string
        example: This is emabarrasing, something went wrong while processing your request. Try again later, if the rror persist please contact support.
    required:
    - code
    - message
  Unauthorized:
    description: Unauthorized
    type: object
    properties:
      code:
        type: string
        example: INPUT_VALIDATION_ERROR
      message:
        type: string
        example: Incorrect value for \"id\" at paths,/transaction/{id},get,parameters,0,schema.
    required:
    - code
    - message
  NotImplemented:
    description: Not Implemented
    type: object
    properties:
      code:
        type: string
        example: FEATURE_NOT_IMPLEMENTED_YET
      message:
        type: string
        example: This feature is not fully implemented yet. You can use the mockup data provided in this response but keep in mind that the values are reandomly generated.
      mockup:
        type: object
        example:
          thisObject: 'Sould be equal to the 200 response object'

    required:
    - code
    - message
